{
  "getting-started": "序言",
  "problem-solving": "資料結構與演算法",
  "prefix-sum": "Prefix Sum",
  "two-pointers": "Two Pointers",
  "linked-list": "Linked List",
  "303.range-sum-query-immutable": "Range Sum Query Immutable",
  "525.contiguous-array": "Contiguous Array",
  "560.subarray-sum-equals-k": "Subarray Sum Equals K",
  "15.3-sum": "3 sum",
  "27.remove-element": "Remove Element",
  "11.container-with-most-water": "Container With Most Water",
  "344.reverse-string": "Reverse String",
  "206.reverse-linked-list": "Reverse Linked List",
  "209.minimum-size-subarray-sum": "Minimum Size Subarray Sum",
  "21.merge-two-sorted-lists": "Merge Two Sorted Lists",
  "82.remove-duplicates-from-sorted-list-ii": "Remove Duplicates From Sorted List 2",
  "83.remove-duplicates-from-sorted-list": "Remove Duplicates From Sorted List",
  "86.partition-list": "Partition List",
  "138.copy-list-with-random-pointer": "Copy List With Random Pointer",
  "141.linked-list-cycle": "Linked List Cycle",
  "142.linked-list-cycle-ii": "Linked List Cycle II",
  "143.reorder-list": "Reorder List",
  "148.sort-list": "Sort List",
  "234.palindrome-linked-list": "Palindrome Linked List",
  "tree": "Tree",
  "144.binary-tree-preorder-traversal": "Binary Tree Preorder Traversal",
  "145.binary-tree-postorder-traversal": "Binary Tree Postorder Traversal",
  "94.binary-tree-inorder-traversal": "Binary Tree Inorder Traversal",
  "102.binary-tree-level-order-traversal": "Binary Tree Level Order Traversal",
  "107.binary-tree-level-order-traversal-ii": "Binary Tree Level Order Traversal II",
  "199.binary-tree-right-side-view": "Binary Tree Right Side View",
  "637.average-of-levels-in-binary-tree": "Average Of Levels In Binary Tree",
  "429.n-ary-tree-level-order-traversal": "N-ary Tree Level Order Traversal",
  "515.find-largest-value-in-each-tree-row": "Find Largest Value In Each Tree Row",
  "116.populating-next-right-pointers-in-each-node": "Populating Next Right Pointers In Each Node",
  "117.populating-next-right-pointers-in-each-node-ii": "Populating Next Right Pointers In Each Node II",
  "104.maximum-depth-of-binary-tree": "Maximum Depth Of Binary Tree",
  "111.minimum-depth-of-binary-tree": "Minimum Depth Of Binary Tree",
  "226.invert-binary-tree": "Invert Binary Tree",
  "101.symmetric-tree": "Symmetric Tree",
  "222.count-complete-tree-nodes": "Count Complete Tree Nodes",
  "110.balanced-binary-tree": "Balanced Binary Tree",
  "257.binary-tree-paths": "Binary Tree Paths",
  "404.sum-of-left-leaves": "Sum Of Left Leaves",
  "513.find-bottom-left-tree-value": "Find Bottom Left Tree Value",
  "106.construct-binary-tree-from-inorder-and-postorder-traversal": "Construct Binary Tree From Inorder And Postorder Traversal",
  "112.path-sum": "Path Sum",
  "654.maximum-binary-tree": "Maximum Binary Tree",
  "700.search-in-a-binary-search-tree": "Search In A Binary Search Tree",
  "98.validate-binary-search-tree": "Validate Binary Search Tree",
  "530.minimum-absolute-difference-in-bst": "Minimum absolute difference in bst",
  "501.find-mode-in-binary-search-tree": "Find Mode In Binary Search Tree",
  "236.lowest-common-ancestor-of-a-binary-tree": "Lowest Common Ancestor Of A Binary Tree",
  "235.lowest-common-ancestor-of-a-binary-search-tree": "Lowest Common Ancestor Of A Binary Search Tree",
  "450.delete-node-in-a-bst": "Delete Node In A Bst",
  "669.trim-a-binary-search-tree": "Trim A Binary Search Tree",
  "538.convert-bst-to-greater-tree": "Convert Bst To Greater Tree",
  "backtracking": "Backtracking",
  "services": "服務介紹",
  "elasticsearch": "Elasticsearch",
  "system-design": "系統設計",
  "delivery-framework": "Delivery framework",
  "scaling": "Scaling",
  "cap-theorem": "CAP Theorem",
  "locking": "Locking",
  "indexing": "Indexing",
  "api-gateway": "API Gateway",
  "load-balancer": "Load Balancer",
  "queue": "Queue",
  "streams-event-sourcing": "Streams/Event Sourcing",
  "distributed-lock": "Distributed Lock",
  "distributed-cache": "Distributed Cache",
  "cdn": "CDN",
  "classic": "經典題目",
  "design-a-distributed-metrics-logging-and-aggregation-system": "Design a Distributed Metrics Logging and Aggregation System",
  "design-a-distributed-stream-processing-system-like-kafka": "Design a Distributed Stream Processing System like Kafka",
  "design-a-key-value-store": "Design a Key Value Store",
  "design-the-k-most-shared-articles-in-various-time-windows-24-hours-1-hour-5-minutes": "Identify the K Most Shared Articles in Various Time Windows (24 hours, 1 hour, 5 minutes)",
  "communication-protocols": "Communication Protocols",
  "security": "Security",
  "database": "Database",
  "core-concepts": "核心觀念",
  "key-technologies": "Key Technologies",
  "contact": "聯絡方式"
}
